/** 
 * Fetchify v1.1.2-beta.4 (https://github.com/ahmedElghandour1/fetchify#readme)
 * Copyright 2021 - 2023 | Author: Ahmed Elghandour
 * Licensed under MIT (https://github.com/ahmedElghandour1/fetchify/blob/master/LICENSE)
 */

var window;(window||={}).fetchify=(()=>{var R=Object.defineProperty;var j=Object.getOwnPropertyDescriptor;var S=Object.getOwnPropertyNames;var k=Object.prototype.hasOwnProperty;var L=(e,t)=>{for(var s in t)R(e,s,{get:t[s],enumerable:!0})},B=(e,t,s,n)=>{if(t&&typeof t=="object"||typeof t=="function")for(let i of S(t))!k.call(e,i)&&i!==s&&R(e,i,{get:()=>t[i],enumerable:!(n=j(t,i))||n.enumerable});return e};var G=e=>B(R({},"__esModule",{value:!0}),e);var Q={};L(Q,{DELETE:()=>U,GET:()=>F,HEAD:()=>v,PATCH:()=>$,POST:()=>q,PUT:()=>O,default:()=>M,getParamsFromString:()=>A,globalConfigs:()=>x,globalHeaders:()=>D,isBrowser:()=>C,nop:()=>w,replaceParamsInString:()=>E,serializeObject:()=>b,setInterceptors:()=>N});var C=()=>typeof window=="object",H=e=>e&&typeof e=="object"&&!Array.isArray(Array),_=e=>{if(!H(e))throw Error("type should be object!");return!Object.keys(e).length};function P(e){return e==null?!1:!!(typeof e=="string"||typeof e=="bigint"||typeof e=="number"||typeof e=="boolean"||Array.isArray(e)&&e.length)}function b(e){if(!H(e)||_(e))return"";let t="?";return Object.keys(e).forEach((n,i)=>{if(!P(e[n]))return;i!==0&&(t+="&"),Array.isArray(e[n])?e[n].forEach((a,o)=>{P(a)&&(o!==0&&(t+="&"),t+=`${encodeURIComponent(n)}=${encodeURIComponent(a)}`)}):t+=`${encodeURIComponent(n)}=${encodeURIComponent(e[n])}`}),t}function A(e){let t=[];return e.replace(/(\{+)([^}]+)(}+)/g,(s,n,i,p)=>(n.length===p.length&&t.push(i),i)),t}function E(e,t){let s=e;return A(e).forEach(i=>{t[i]&&(s=s.replace(`{${i}}`,t[i]))}),s}function w(){}var z=["json","text","blob","arrayBuffer","formData"],x=function(){let t={};return{set:function(o){t=o},getAll:function(){return t},update:function(o){t={...t,...o}},remove:function(o){typeof o=="string"&&delete t[o]}}}(),D=function(){let t={};return{set:function(o){t=o},getAll:function(){return t},update:function(o){t={...t,...o}},remove:function(o){typeof o=="string"&&delete t[o]}}}(),f={request:void 0,response:void 0};function N({request:e,response:t}){e&&(f.request=e),t&&(f.response=t)}function W(e,t,s={}){return t.startsWith("http")?t:`${e}${t.startsWith("/")?"":"/"}${t}${b(s)}`}async function g(e,t,{params:s={},configs:n={},body:i,headers:p={},responseType:a="json",meta:o={}}){let l={},c,u,d,r={headers:{...D.getAll(),...p},configs:{...x.getAll(),...n},params:s,body:i,path:t,responseType:a,meta:o,type:e};f.request&&(r=f.request(r)||r),l.method=r.type,r.body&&r.type&&r.type!=="GET"&&(r.body instanceof FormData||typeof r.body=="string"?l.body=r.body:l.body=r.body&&JSON.stringify(r.body)),Object.keys(r.headers).forEach(y=>{r.headers[y]===void 0&&typeof r.headers[y]>"u"&&delete r.headers[y]}),u=W(r.configs.baseURL,r.path,r.params),l={...l,...r.configs,headers:r.headers};try{d=await fetch(u,l);let y=r.type==="HEAD"||d.status===204,h={};if(y||(h=await d[z.includes(r.responseType)?r.responseType:"json"]()),!d.ok)throw c={meta:r.meta,response:d,error:{...h}},c;return c={data:h,response:d,meta:r.meta},f.response?f.response(c,l,r):c}catch(y){let I=y instanceof Error&&!("response"in y)?{error:{name:y.name,message:y.message},meta:r.meta}:y;return f.response?f.response(I,l,r):I}}function m(){return new AbortController}function T(e,t){return typeof e!="number"?void 0:setTimeout(()=>{t.abort()},e)}async function F(e,{params:t,configs:s={},headers:n,responseType:i,meta:p={},timeout:a}={},o){let l=m();l instanceof AbortController&&(s.signal=l.signal),o&&o(l);let c=T(a,l),{data:u,response:d,error:r}=await g("GET",e,{params:t,configs:s,headers:n,responseType:i,meta:p});return clearTimeout(c),{data:u,response:d,error:r,meta:p}}async function v(e,{params:t,configs:s={},headers:n,meta:i={},timeout:p}={},a){let o=m();o instanceof AbortController&&(s.signal=o.signal),a&&a(o);let l=T(p,o),{data:c,response:u,error:d}=await g("HEAD",e,{params:t,configs:s,headers:n,meta:i});return clearTimeout(l),{data:c,response:u,error:d,meta:i}}async function q(e,{body:t={},params:s,configs:n={},headers:i={},responseType:p,meta:a={},timeout:o}={},l){let c=m();c instanceof AbortController&&(n.signal=c.signal),l&&l(c);let u=T(o,c),{data:d,response:r,error:y}=await g("POST",e,{params:s,configs:n,body:t,headers:i,responseType:p,meta:a});return clearTimeout(u),{data:d,response:r,error:y,meta:a}}async function O(e,{body:t={},params:s,configs:n={},headers:i={},responseType:p,meta:a={},timeout:o}={},l){let c=m();c instanceof AbortController&&(n.signal=c.signal),l&&l(c);let u=T(o,c),{data:d,response:r,error:y}=await g("PUT",e,{params:s,configs:n,body:t,headers:i,responseType:p,meta:a});return clearTimeout(u),{data:d,response:r,error:y,meta:a}}async function U(e,{body:t={},params:s,configs:n={},headers:i={},responseType:p,meta:a={},timeout:o}={},l){let c=m();c instanceof AbortController&&(n.signal=c.signal),l&&l(c);let u=T(o,c),{data:d,response:r,error:y}=await g("DELETE",e,{params:s,configs:n,body:t,headers:i,responseType:p,meta:a});return clearTimeout(u),{data:d,response:r,error:y,meta:a}}async function $(e,{body:t={},params:s,configs:n={},headers:i={},responseType:p,meta:a={},timeout:o}={},l){let c=m();c instanceof AbortController&&(n.signal=c.signal),l&&l(c);let u=T(o,c),{data:d,response:r,error:y}=await g("PATCH",e,{params:s,configs:n,body:t,headers:i,responseType:p,meta:a});return clearTimeout(u),{data:d,response:r,error:y,meta:a}}var J={POST:q,GET:F,DELETE:U,PUT:O,PATCH:$,HEAD:v},M=J;return G(Q);})();
//# sourceMappingURL=data:application/json;base64,
