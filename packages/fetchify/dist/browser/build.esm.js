/** 
 * Fetchify v1.1.2-beta.6 (https://github.com/ahmedElghandour1/fetchify#readme)
 * Copyright 2021 - 2023 | Author: Ahmed Elghandour
 * Licensed under MIT (https://github.com/ahmedElghandour1/fetchify/blob/master/LICENSE)
 */

var nt=Object.create;var Je=Object.defineProperty;var ot=Object.getOwnPropertyDescriptor;var at=Object.getOwnPropertyNames;var it=Object.getPrototypeOf,ft=Object.prototype.hasOwnProperty;var S=(r,e)=>()=>(e||r((e={exports:{}}).exports,e),e.exports);var lt=(r,e,t,n)=>{if(e&&typeof e=="object"||typeof e=="function")for(let a of at(e))!ft.call(r,a)&&a!==t&&Je(r,a,{get:()=>e[a],enumerable:!(n=ot(e,a))||n.enumerable});return r};var st=(r,e,t)=>(t=r!=null?nt(it(r)):{},lt(e||!r||!r.__esModule?Je(t,"default",{value:r,enumerable:!0}):t,r));var Ke=S((lo,je)=>{"use strict";je.exports=function(){if(typeof Symbol!="function"||typeof Object.getOwnPropertySymbols!="function")return!1;if(typeof Symbol.iterator=="symbol")return!0;var e={},t=Symbol("test"),n=Object(t);if(typeof t=="string"||Object.prototype.toString.call(t)!=="[object Symbol]"||Object.prototype.toString.call(n)!=="[object Symbol]")return!1;var a=42;e[t]=a;for(t in e)return!1;if(typeof Object.keys=="function"&&Object.keys(e).length!==0||typeof Object.getOwnPropertyNames=="function"&&Object.getOwnPropertyNames(e).length!==0)return!1;var o=Object.getOwnPropertySymbols(e);if(o.length!==1||o[0]!==t||!Object.prototype.propertyIsEnumerable.call(e,t))return!1;if(typeof Object.getOwnPropertyDescriptor=="function"){var f=Object.getOwnPropertyDescriptor(e,t);if(f.value!==a||f.enumerable!==!0)return!1}return!0}});var Ze=S((so,Xe)=>{"use strict";var Ye=typeof Symbol<"u"&&Symbol,ct=Ke();Xe.exports=function(){return typeof Ye!="function"||typeof Symbol!="function"||typeof Ye("foo")!="symbol"||typeof Symbol("bar")!="symbol"?!1:ct()}});var rr=S((co,er)=>{"use strict";var ut="Function.prototype.bind called on incompatible ",we=Array.prototype.slice,pt=Object.prototype.toString,yt="[object Function]";er.exports=function(e){var t=this;if(typeof t!="function"||pt.call(t)!==yt)throw new TypeError(ut+t);for(var n=we.call(arguments,1),a,o=function(){if(this instanceof a){var u=t.apply(this,n.concat(we.call(arguments)));return Object(u)===u?u:this}else return t.apply(e,n.concat(we.call(arguments)))},f=Math.max(0,t.length-n.length),i=[],l=0;l<f;l++)i.push("$"+l);if(a=Function("binder","return function ("+i.join(",")+"){ return binder.apply(this,arguments); }")(o),t.prototype){var s=function(){};s.prototype=t.prototype,a.prototype=new s,s.prototype=null}return a}});var pe=S((uo,tr)=>{"use strict";var dt=rr();tr.exports=Function.prototype.bind||dt});var or=S((po,nr)=>{"use strict";var gt=pe();nr.exports=gt.call(Function.call,Object.prototype.hasOwnProperty)});var ge=S((yo,lr)=>{"use strict";var g,j=SyntaxError,fr=Function,V=TypeError,Ee=function(r){try{return fr('"use strict"; return ('+r+").constructor;")()}catch{}},U=Object.getOwnPropertyDescriptor;if(U)try{U({},"")}catch{U=null}var Re=function(){throw new V},mt=U?function(){try{return arguments.callee,Re}catch{try{return U(arguments,"callee").get}catch{return Re}}}():Re,z=Ze()(),C=Object.getPrototypeOf||function(r){return r.__proto__},Q={},vt=typeof Uint8Array>"u"?g:C(Uint8Array),J={"%AggregateError%":typeof AggregateError>"u"?g:AggregateError,"%Array%":Array,"%ArrayBuffer%":typeof ArrayBuffer>"u"?g:ArrayBuffer,"%ArrayIteratorPrototype%":z?C([][Symbol.iterator]()):g,"%AsyncFromSyncIteratorPrototype%":g,"%AsyncFunction%":Q,"%AsyncGenerator%":Q,"%AsyncGeneratorFunction%":Q,"%AsyncIteratorPrototype%":Q,"%Atomics%":typeof Atomics>"u"?g:Atomics,"%BigInt%":typeof BigInt>"u"?g:BigInt,"%Boolean%":Boolean,"%DataView%":typeof DataView>"u"?g:DataView,"%Date%":Date,"%decodeURI%":decodeURI,"%decodeURIComponent%":decodeURIComponent,"%encodeURI%":encodeURI,"%encodeURIComponent%":encodeURIComponent,"%Error%":Error,"%eval%":eval,"%EvalError%":EvalError,"%Float32Array%":typeof Float32Array>"u"?g:Float32Array,"%Float64Array%":typeof Float64Array>"u"?g:Float64Array,"%FinalizationRegistry%":typeof FinalizationRegistry>"u"?g:FinalizationRegistry,"%Function%":fr,"%GeneratorFunction%":Q,"%Int8Array%":typeof Int8Array>"u"?g:Int8Array,"%Int16Array%":typeof Int16Array>"u"?g:Int16Array,"%Int32Array%":typeof Int32Array>"u"?g:Int32Array,"%isFinite%":isFinite,"%isNaN%":isNaN,"%IteratorPrototype%":z?C(C([][Symbol.iterator]())):g,"%JSON%":typeof JSON=="object"?JSON:g,"%Map%":typeof Map>"u"?g:Map,"%MapIteratorPrototype%":typeof Map>"u"||!z?g:C(new Map()[Symbol.iterator]()),"%Math%":Math,"%Number%":Number,"%Object%":Object,"%parseFloat%":parseFloat,"%parseInt%":parseInt,"%Promise%":typeof Promise>"u"?g:Promise,"%Proxy%":typeof Proxy>"u"?g:Proxy,"%RangeError%":RangeError,"%ReferenceError%":ReferenceError,"%Reflect%":typeof Reflect>"u"?g:Reflect,"%RegExp%":RegExp,"%Set%":typeof Set>"u"?g:Set,"%SetIteratorPrototype%":typeof Set>"u"||!z?g:C(new Set()[Symbol.iterator]()),"%SharedArrayBuffer%":typeof SharedArrayBuffer>"u"?g:SharedArrayBuffer,"%String%":String,"%StringIteratorPrototype%":z?C(""[Symbol.iterator]()):g,"%Symbol%":z?Symbol:g,"%SyntaxError%":j,"%ThrowTypeError%":mt,"%TypedArray%":vt,"%TypeError%":V,"%Uint8Array%":typeof Uint8Array>"u"?g:Uint8Array,"%Uint8ClampedArray%":typeof Uint8ClampedArray>"u"?g:Uint8ClampedArray,"%Uint16Array%":typeof Uint16Array>"u"?g:Uint16Array,"%Uint32Array%":typeof Uint32Array>"u"?g:Uint32Array,"%URIError%":URIError,"%WeakMap%":typeof WeakMap>"u"?g:WeakMap,"%WeakRef%":typeof WeakRef>"u"?g:WeakRef,"%WeakSet%":typeof WeakSet>"u"?g:WeakSet},ht=function r(e){var t;if(e==="%AsyncFunction%")t=Ee("async function () {}");else if(e==="%GeneratorFunction%")t=Ee("function* () {}");else if(e==="%AsyncGeneratorFunction%")t=Ee("async function* () {}");else if(e==="%AsyncGenerator%"){var n=r("%AsyncGeneratorFunction%");n&&(t=n.prototype)}else if(e==="%AsyncIteratorPrototype%"){var a=r("%AsyncGenerator%");a&&(t=C(a.prototype))}return J[e]=t,t},ar={"%ArrayBufferPrototype%":["ArrayBuffer","prototype"],"%ArrayPrototype%":["Array","prototype"],"%ArrayProto_entries%":["Array","prototype","entries"],"%ArrayProto_forEach%":["Array","prototype","forEach"],"%ArrayProto_keys%":["Array","prototype","keys"],"%ArrayProto_values%":["Array","prototype","values"],"%AsyncFunctionPrototype%":["AsyncFunction","prototype"],"%AsyncGenerator%":["AsyncGeneratorFunction","prototype"],"%AsyncGeneratorPrototype%":["AsyncGeneratorFunction","prototype","prototype"],"%BooleanPrototype%":["Boolean","prototype"],"%DataViewPrototype%":["DataView","prototype"],"%DatePrototype%":["Date","prototype"],"%ErrorPrototype%":["Error","prototype"],"%EvalErrorPrototype%":["EvalError","prototype"],"%Float32ArrayPrototype%":["Float32Array","prototype"],"%Float64ArrayPrototype%":["Float64Array","prototype"],"%FunctionPrototype%":["Function","prototype"],"%Generator%":["GeneratorFunction","prototype"],"%GeneratorPrototype%":["GeneratorFunction","prototype","prototype"],"%Int8ArrayPrototype%":["Int8Array","prototype"],"%Int16ArrayPrototype%":["Int16Array","prototype"],"%Int32ArrayPrototype%":["Int32Array","prototype"],"%JSONParse%":["JSON","parse"],"%JSONStringify%":["JSON","stringify"],"%MapPrototype%":["Map","prototype"],"%NumberPrototype%":["Number","prototype"],"%ObjectPrototype%":["Object","prototype"],"%ObjProto_toString%":["Object","prototype","toString"],"%ObjProto_valueOf%":["Object","prototype","valueOf"],"%PromisePrototype%":["Promise","prototype"],"%PromiseProto_then%":["Promise","prototype","then"],"%Promise_all%":["Promise","all"],"%Promise_reject%":["Promise","reject"],"%Promise_resolve%":["Promise","resolve"],"%RangeErrorPrototype%":["RangeError","prototype"],"%ReferenceErrorPrototype%":["ReferenceError","prototype"],"%RegExpPrototype%":["RegExp","prototype"],"%SetPrototype%":["Set","prototype"],"%SharedArrayBufferPrototype%":["SharedArrayBuffer","prototype"],"%StringPrototype%":["String","prototype"],"%SymbolPrototype%":["Symbol","prototype"],"%SyntaxErrorPrototype%":["SyntaxError","prototype"],"%TypedArrayPrototype%":["TypedArray","prototype"],"%TypeErrorPrototype%":["TypeError","prototype"],"%Uint8ArrayPrototype%":["Uint8Array","prototype"],"%Uint8ClampedArrayPrototype%":["Uint8ClampedArray","prototype"],"%Uint16ArrayPrototype%":["Uint16Array","prototype"],"%Uint32ArrayPrototype%":["Uint32Array","prototype"],"%URIErrorPrototype%":["URIError","prototype"],"%WeakMapPrototype%":["WeakMap","prototype"],"%WeakSetPrototype%":["WeakSet","prototype"]},ae=pe(),ye=or(),St=ae.call(Function.call,Array.prototype.concat),bt=ae.call(Function.apply,Array.prototype.splice),ir=ae.call(Function.call,String.prototype.replace),de=ae.call(Function.call,String.prototype.slice),At=ae.call(Function.call,RegExp.prototype.exec),Pt=/[^%.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|%$))/g,Ot=/\\(\\)?/g,wt=function(e){var t=de(e,0,1),n=de(e,-1);if(t==="%"&&n!=="%")throw new j("invalid intrinsic syntax, expected closing `%`");if(n==="%"&&t!=="%")throw new j("invalid intrinsic syntax, expected opening `%`");var a=[];return ir(e,Pt,function(o,f,i,l){a[a.length]=i?ir(l,Ot,"$1"):f||o}),a},Et=function(e,t){var n=e,a;if(ye(ar,n)&&(a=ar[n],n="%"+a[0]+"%"),ye(J,n)){var o=J[n];if(o===Q&&(o=ht(n)),typeof o>"u"&&!t)throw new V("intrinsic "+e+" exists, but is not available. Please file an issue!");return{alias:a,name:n,value:o}}throw new j("intrinsic "+e+" does not exist!")};lr.exports=function(e,t){if(typeof e!="string"||e.length===0)throw new V("intrinsic name must be a non-empty string");if(arguments.length>1&&typeof t!="boolean")throw new V('"allowMissing" argument must be a boolean');if(At(/^%?[^%]*%?$/,e)===null)throw new j("`%` may not be present anywhere but at the beginning and end of the intrinsic name");var n=wt(e),a=n.length>0?n[0]:"",o=Et("%"+a+"%",t),f=o.name,i=o.value,l=!1,s=o.alias;s&&(a=s[0],bt(n,St([0,1],s)));for(var u=1,p=!0;u<n.length;u+=1){var c=n[u],y=de(c,0,1),d=de(c,-1);if((y==='"'||y==="'"||y==="`"||d==='"'||d==="'"||d==="`")&&y!==d)throw new j("property names with quotes must have matching quotes");if((c==="constructor"||!p)&&(l=!0),a+="."+c,f="%"+a+"%",ye(J,f))i=J[f];else if(i!=null){if(!(c in i)){if(!t)throw new V("base intrinsic for "+e+" exists, but the property is not available.");return}if(U&&u+1>=n.length){var h=U(i,c);p=!!h,p&&"get"in h&&!("originalValue"in h.get)?i=h.get:i=i[c]}else p=ye(i,c),i=i[c];p&&!l&&(J[f]=i)}}return i}});var dr=S((go,me)=>{"use strict";var xe=pe(),K=ge(),ur=K("%Function.prototype.apply%"),pr=K("%Function.prototype.call%"),yr=K("%Reflect.apply%",!0)||xe.call(pr,ur),sr=K("%Object.getOwnPropertyDescriptor%",!0),B=K("%Object.defineProperty%",!0),Rt=K("%Math.max%");if(B)try{B({},"a",{value:1})}catch{B=null}me.exports=function(e){var t=yr(xe,pr,arguments);if(sr&&B){var n=sr(t,"length");n.configurable&&B(t,"length",{value:1+Rt(0,e.length-(arguments.length-1))})}return t};var cr=function(){return yr(xe,ur,arguments)};B?B(me.exports,"apply",{value:cr}):me.exports.apply=cr});var hr=S((mo,vr)=>{"use strict";var gr=ge(),mr=dr(),xt=mr(gr("String.prototype.indexOf"));vr.exports=function(e,t){var n=gr(e,!!t);return typeof n=="function"&&xt(e,".prototype.")>-1?mr(n):n}});var Sr=S(()=>{});var Ur=S((So,qr)=>{var Ue=typeof Map=="function"&&Map.prototype,Te=Object.getOwnPropertyDescriptor&&Ue?Object.getOwnPropertyDescriptor(Map.prototype,"size"):null,he=Ue&&Te&&typeof Te.get=="function"?Te.get:null,Tt=Ue&&Map.prototype.forEach,Be=typeof Set=="function"&&Set.prototype,Ie=Object.getOwnPropertyDescriptor&&Be?Object.getOwnPropertyDescriptor(Set.prototype,"size"):null,Se=Be&&Ie&&typeof Ie.get=="function"?Ie.get:null,It=Be&&Set.prototype.forEach,Ft=typeof WeakMap=="function"&&WeakMap.prototype,fe=Ft?WeakMap.prototype.has:null,Ct=typeof WeakSet=="function"&&WeakSet.prototype,le=Ct?WeakSet.prototype.has:null,Dt=typeof WeakRef=="function"&&WeakRef.prototype,br=Dt?WeakRef.prototype.deref:null,Nt=Boolean.prototype.valueOf,$t=Object.prototype.toString,Mt=Function.prototype.toString,qt=String.prototype.match,He=String.prototype.slice,N=String.prototype.replace,Ut=String.prototype.toUpperCase,Ar=String.prototype.toLowerCase,Fr=RegExp.prototype.test,Pr=Array.prototype.concat,O=Array.prototype.join,Bt=Array.prototype.slice,Or=Math.floor,De=typeof BigInt=="function"?BigInt.prototype.valueOf:null,Fe=Object.getOwnPropertySymbols,Ne=typeof Symbol=="function"&&typeof Symbol.iterator=="symbol"?Symbol.prototype.toString:null,Y=typeof Symbol=="function"&&typeof Symbol.iterator=="object",b=typeof Symbol=="function"&&Symbol.toStringTag&&(typeof Symbol.toStringTag===Y?"object":"symbol")?Symbol.toStringTag:null,Cr=Object.prototype.propertyIsEnumerable,wr=(typeof Reflect=="function"?Reflect.getPrototypeOf:Object.getPrototypeOf)||([].__proto__===Array.prototype?function(r){return r.__proto__}:null);function Er(r,e){if(r===1/0||r===-1/0||r!==r||r&&r>-1e3&&r<1e3||Fr.call(/e/,e))return e;var t=/[0-9](?=(?:[0-9]{3})+(?![0-9]))/g;if(typeof r=="number"){var n=r<0?-Or(-r):Or(r);if(n!==r){var a=String(n),o=He.call(e,a.length+1);return N.call(a,t,"$&_")+"."+N.call(N.call(o,/([0-9]{3})/g,"$&_"),/_$/,"")}}return N.call(e,t,"$&_")}var $e=Sr(),Rr=$e.custom,xr=Nr(Rr)?Rr:null;qr.exports=function r(e,t,n,a){var o=t||{};if(D(o,"quoteStyle")&&o.quoteStyle!=="single"&&o.quoteStyle!=="double")throw new TypeError('option "quoteStyle" must be "single" or "double"');if(D(o,"maxStringLength")&&(typeof o.maxStringLength=="number"?o.maxStringLength<0&&o.maxStringLength!==1/0:o.maxStringLength!==null))throw new TypeError('option "maxStringLength", if provided, must be a positive integer, Infinity, or `null`');var f=D(o,"customInspect")?o.customInspect:!0;if(typeof f!="boolean"&&f!=="symbol")throw new TypeError("option \"customInspect\", if provided, must be `true`, `false`, or `'symbol'`");if(D(o,"indent")&&o.indent!==null&&o.indent!=="	"&&!(parseInt(o.indent,10)===o.indent&&o.indent>0))throw new TypeError('option "indent" must be "\\t", an integer > 0, or `null`');if(D(o,"numericSeparator")&&typeof o.numericSeparator!="boolean")throw new TypeError('option "numericSeparator", if provided, must be `true` or `false`');var i=o.numericSeparator;if(typeof e>"u")return"undefined";if(e===null)return"null";if(typeof e=="boolean")return e?"true":"false";if(typeof e=="string")return Mr(e,o);if(typeof e=="number"){if(e===0)return 1/0/e>0?"0":"-0";var l=String(e);return i?Er(e,l):l}if(typeof e=="bigint"){var s=String(e)+"n";return i?Er(e,s):s}var u=typeof o.depth>"u"?5:o.depth;if(typeof n>"u"&&(n=0),n>=u&&u>0&&typeof e=="object")return Me(e)?"[Array]":"[Object]";var p=tn(o,n);if(typeof a>"u")a=[];else if($r(a,e)>=0)return"[Circular]";function c(x,k,ue){if(k&&(a=Bt.call(a),a.push(k)),ue){var G={depth:o.depth};return D(o,"quoteStyle")&&(G.quoteStyle=o.quoteStyle),r(x,G,n+1,a)}return r(x,o,n+1,a)}if(typeof e=="function"&&!Tr(e)){var y=Vt(e),d=ve(e,c);return"[Function"+(y?": "+y:" (anonymous)")+"]"+(d.length>0?" { "+O.call(d,", ")+" }":"")}if(Nr(e)){var h=Y?N.call(String(e),/^(Symbol\(.*\))_[^)]*$/,"$1"):Ne.call(e);return typeof e=="object"&&!Y?ie(h):h}if(Zt(e)){for(var E="<"+Ar.call(String(e.nodeName)),m=e.attributes||[],R=0;R<m.length;R++)E+=" "+m[R].name+"="+Dr(Ht(m[R].value),"double",o);return E+=">",e.childNodes&&e.childNodes.length&&(E+="..."),E+="</"+Ar.call(String(e.nodeName))+">",E}if(Me(e)){if(e.length===0)return"[]";var I=ve(e,c);return p&&!rn(I)?"["+qe(I,p)+"]":"[ "+O.call(I,", ")+" ]"}if(Wt(e)){var _=ve(e,c);return!("cause"in Error.prototype)&&"cause"in e&&!Cr.call(e,"cause")?"{ ["+String(e)+"] "+O.call(Pr.call("[cause]: "+c(e.cause),_),", ")+" }":_.length===0?"["+String(e)+"]":"{ ["+String(e)+"] "+O.call(_,", ")+" }"}if(typeof e=="object"&&f){if(xr&&typeof e[xr]=="function"&&$e)return $e(e,{depth:u-n});if(f!=="symbol"&&typeof e.inspect=="function")return e.inspect()}if(Jt(e)){var ne=[];return Tt.call(e,function(x,k){ne.push(c(k,e,!0)+" => "+c(x,e))}),Ir("Map",he.call(e),ne,p)}if(Yt(e)){var ce=[];return It.call(e,function(x){ce.push(c(x,e))}),Ir("Set",Se.call(e),ce,p)}if(jt(e))return Ce("WeakMap");if(Xt(e))return Ce("WeakSet");if(Kt(e))return Ce("WeakRef");if(kt(e))return ie(c(Number(e)));if(zt(e))return ie(c(De.call(e)));if(Gt(e))return ie(Nt.call(e));if(Lt(e))return ie(c(String(e)));if(!_t(e)&&!Tr(e)){var q=ve(e,c),F=wr?wr(e)===Object.prototype:e instanceof Object||e.constructor===Object,W=e instanceof Object?"":"null prototype",L=!F&&b&&Object(e)===e&&b in e?He.call($(e),8,-1):W?"Object":"",oe=F||typeof e.constructor!="function"?"":e.constructor.name?e.constructor.name+" ":"",P=oe+(L||W?"["+O.call(Pr.call([],L||[],W||[]),": ")+"] ":"");return q.length===0?P+"{}":p?P+"{"+qe(q,p)+"}":P+"{ "+O.call(q,", ")+" }"}return String(e)};function Dr(r,e,t){var n=(t.quoteStyle||e)==="double"?'"':"'";return n+r+n}function Ht(r){return N.call(String(r),/"/g,"&quot;")}function Me(r){return $(r)==="[object Array]"&&(!b||!(typeof r=="object"&&b in r))}function _t(r){return $(r)==="[object Date]"&&(!b||!(typeof r=="object"&&b in r))}function Tr(r){return $(r)==="[object RegExp]"&&(!b||!(typeof r=="object"&&b in r))}function Wt(r){return $(r)==="[object Error]"&&(!b||!(typeof r=="object"&&b in r))}function Lt(r){return $(r)==="[object String]"&&(!b||!(typeof r=="object"&&b in r))}function kt(r){return $(r)==="[object Number]"&&(!b||!(typeof r=="object"&&b in r))}function Gt(r){return $(r)==="[object Boolean]"&&(!b||!(typeof r=="object"&&b in r))}function Nr(r){if(Y)return r&&typeof r=="object"&&r instanceof Symbol;if(typeof r=="symbol")return!0;if(!r||typeof r!="object"||!Ne)return!1;try{return Ne.call(r),!0}catch{}return!1}function zt(r){if(!r||typeof r!="object"||!De)return!1;try{return De.call(r),!0}catch{}return!1}var Qt=Object.prototype.hasOwnProperty||function(r){return r in this};function D(r,e){return Qt.call(r,e)}function $(r){return $t.call(r)}function Vt(r){if(r.name)return r.name;var e=qt.call(Mt.call(r),/^function\s*([\w$]+)/);return e?e[1]:null}function $r(r,e){if(r.indexOf)return r.indexOf(e);for(var t=0,n=r.length;t<n;t++)if(r[t]===e)return t;return-1}function Jt(r){if(!he||!r||typeof r!="object")return!1;try{he.call(r);try{Se.call(r)}catch{return!0}return r instanceof Map}catch{}return!1}function jt(r){if(!fe||!r||typeof r!="object")return!1;try{fe.call(r,fe);try{le.call(r,le)}catch{return!0}return r instanceof WeakMap}catch{}return!1}function Kt(r){if(!br||!r||typeof r!="object")return!1;try{return br.call(r),!0}catch{}return!1}function Yt(r){if(!Se||!r||typeof r!="object")return!1;try{Se.call(r);try{he.call(r)}catch{return!0}return r instanceof Set}catch{}return!1}function Xt(r){if(!le||!r||typeof r!="object")return!1;try{le.call(r,le);try{fe.call(r,fe)}catch{return!0}return r instanceof WeakSet}catch{}return!1}function Zt(r){return!r||typeof r!="object"?!1:typeof HTMLElement<"u"&&r instanceof HTMLElement?!0:typeof r.nodeName=="string"&&typeof r.getAttribute=="function"}function Mr(r,e){if(r.length>e.maxStringLength){var t=r.length-e.maxStringLength,n="... "+t+" more character"+(t>1?"s":"");return Mr(He.call(r,0,e.maxStringLength),e)+n}var a=N.call(N.call(r,/(['\\])/g,"\\$1"),/[\x00-\x1f]/g,en);return Dr(a,"single",e)}function en(r){var e=r.charCodeAt(0),t={8:"b",9:"t",10:"n",12:"f",13:"r"}[e];return t?"\\"+t:"\\x"+(e<16?"0":"")+Ut.call(e.toString(16))}function ie(r){return"Object("+r+")"}function Ce(r){return r+" { ? }"}function Ir(r,e,t,n){var a=n?qe(t,n):O.call(t,", ");return r+" ("+e+") {"+a+"}"}function rn(r){for(var e=0;e<r.length;e++)if($r(r[e],`
`)>=0)return!1;return!0}function tn(r,e){var t;if(r.indent==="	")t="	";else if(typeof r.indent=="number"&&r.indent>0)t=O.call(Array(r.indent+1)," ");else return null;return{base:t,prev:O.call(Array(e+1),t)}}function qe(r,e){if(r.length===0)return"";var t=`
`+e.prev+e.base;return t+O.call(r,","+t)+`
`+e.prev}function ve(r,e){var t=Me(r),n=[];if(t){n.length=r.length;for(var a=0;a<r.length;a++)n[a]=D(r,a)?e(r[a],r):""}var o=typeof Fe=="function"?Fe(r):[],f;if(Y){f={};for(var i=0;i<o.length;i++)f["$"+o[i]]=o[i]}for(var l in r)!D(r,l)||t&&String(Number(l))===l&&l<r.length||Y&&f["$"+l]instanceof Symbol||(Fr.call(/[^\w$]/,l)?n.push(e(l,r)+": "+e(r[l],r)):n.push(l+": "+e(r[l],r)));if(typeof Fe=="function")for(var s=0;s<o.length;s++)Cr.call(r,o[s])&&n.push("["+e(o[s])+"]: "+e(r[o[s]],r));return n}});var Hr=S((bo,Br)=>{"use strict";var _e=ge(),X=hr(),nn=Ur(),on=_e("%TypeError%"),be=_e("%WeakMap%",!0),Ae=_e("%Map%",!0),an=X("WeakMap.prototype.get",!0),fn=X("WeakMap.prototype.set",!0),ln=X("WeakMap.prototype.has",!0),sn=X("Map.prototype.get",!0),cn=X("Map.prototype.set",!0),un=X("Map.prototype.has",!0),We=function(r,e){for(var t=r,n;(n=t.next)!==null;t=n)if(n.key===e)return t.next=n.next,n.next=r.next,r.next=n,n},pn=function(r,e){var t=We(r,e);return t&&t.value},yn=function(r,e,t){var n=We(r,e);n?n.value=t:r.next={key:e,next:r.next,value:t}},dn=function(r,e){return!!We(r,e)};Br.exports=function(){var e,t,n,a={assert:function(o){if(!a.has(o))throw new on("Side channel does not contain "+nn(o))},get:function(o){if(be&&o&&(typeof o=="object"||typeof o=="function")){if(e)return an(e,o)}else if(Ae){if(t)return sn(t,o)}else if(n)return pn(n,o)},has:function(o){if(be&&o&&(typeof o=="object"||typeof o=="function")){if(e)return ln(e,o)}else if(Ae){if(t)return un(t,o)}else if(n)return dn(n,o);return!1},set:function(o,f){be&&o&&(typeof o=="object"||typeof o=="function")?(e||(e=new be),fn(e,o,f)):Ae?(t||(t=new Ae),cn(t,o,f)):(n||(n={key:{},next:null}),yn(n,o,f))}};return a}});var Pe=S((Ao,_r)=>{"use strict";var gn=String.prototype.replace,mn=/%20/g,Le={RFC1738:"RFC1738",RFC3986:"RFC3986"};_r.exports={default:Le.RFC3986,formatters:{RFC1738:function(r){return gn.call(r,mn,"+")},RFC3986:function(r){return String(r)}},RFC1738:Le.RFC1738,RFC3986:Le.RFC3986}});var Ge=S((Po,Lr)=>{"use strict";var vn=Pe(),ke=Object.prototype.hasOwnProperty,H=Array.isArray,w=function(){for(var r=[],e=0;e<256;++e)r.push("%"+((e<16?"0":"")+e.toString(16)).toUpperCase());return r}(),hn=function(e){for(;e.length>1;){var t=e.pop(),n=t.obj[t.prop];if(H(n)){for(var a=[],o=0;o<n.length;++o)typeof n[o]<"u"&&a.push(n[o]);t.obj[t.prop]=a}}},Wr=function(e,t){for(var n=t&&t.plainObjects?Object.create(null):{},a=0;a<e.length;++a)typeof e[a]<"u"&&(n[a]=e[a]);return n},Sn=function r(e,t,n){if(!t)return e;if(typeof t!="object"){if(H(e))e.push(t);else if(e&&typeof e=="object")(n&&(n.plainObjects||n.allowPrototypes)||!ke.call(Object.prototype,t))&&(e[t]=!0);else return[e,t];return e}if(!e||typeof e!="object")return[e].concat(t);var a=e;return H(e)&&!H(t)&&(a=Wr(e,n)),H(e)&&H(t)?(t.forEach(function(o,f){if(ke.call(e,f)){var i=e[f];i&&typeof i=="object"&&o&&typeof o=="object"?e[f]=r(i,o,n):e.push(o)}else e[f]=o}),e):Object.keys(t).reduce(function(o,f){var i=t[f];return ke.call(o,f)?o[f]=r(o[f],i,n):o[f]=i,o},a)},bn=function(e,t){return Object.keys(t).reduce(function(n,a){return n[a]=t[a],n},e)},An=function(r,e,t){var n=r.replace(/\+/g," ");if(t==="iso-8859-1")return n.replace(/%[0-9a-f]{2}/gi,unescape);try{return decodeURIComponent(n)}catch{return n}},Pn=function(e,t,n,a,o){if(e.length===0)return e;var f=e;if(typeof e=="symbol"?f=Symbol.prototype.toString.call(e):typeof e!="string"&&(f=String(e)),n==="iso-8859-1")return escape(f).replace(/%u[0-9a-f]{4}/gi,function(u){return"%26%23"+parseInt(u.slice(2),16)+"%3B"});for(var i="",l=0;l<f.length;++l){var s=f.charCodeAt(l);if(s===45||s===46||s===95||s===126||s>=48&&s<=57||s>=65&&s<=90||s>=97&&s<=122||o===vn.RFC1738&&(s===40||s===41)){i+=f.charAt(l);continue}if(s<128){i=i+w[s];continue}if(s<2048){i=i+(w[192|s>>6]+w[128|s&63]);continue}if(s<55296||s>=57344){i=i+(w[224|s>>12]+w[128|s>>6&63]+w[128|s&63]);continue}l+=1,s=65536+((s&1023)<<10|f.charCodeAt(l)&1023),i+=w[240|s>>18]+w[128|s>>12&63]+w[128|s>>6&63]+w[128|s&63]}return i},On=function(e){for(var t=[{obj:{o:e},prop:"o"}],n=[],a=0;a<t.length;++a)for(var o=t[a],f=o.obj[o.prop],i=Object.keys(f),l=0;l<i.length;++l){var s=i[l],u=f[s];typeof u=="object"&&u!==null&&n.indexOf(u)===-1&&(t.push({obj:f,prop:s}),n.push(u))}return hn(t),e},wn=function(e){return Object.prototype.toString.call(e)==="[object RegExp]"},En=function(e){return!e||typeof e!="object"?!1:!!(e.constructor&&e.constructor.isBuffer&&e.constructor.isBuffer(e))},Rn=function(e,t){return[].concat(e,t)},xn=function(e,t){if(H(e)){for(var n=[],a=0;a<e.length;a+=1)n.push(t(e[a]));return n}return t(e)};Lr.exports={arrayToObject:Wr,assign:bn,combine:Rn,compact:On,decode:An,encode:Pn,isBuffer:En,isRegExp:wn,maybeMap:xn,merge:Sn}});var Jr=S((Oo,Vr)=>{"use strict";var zr=Hr(),Oe=Ge(),se=Pe(),Tn=Object.prototype.hasOwnProperty,kr={brackets:function(e){return e+"[]"},comma:"comma",indices:function(e,t){return e+"["+t+"]"},repeat:function(e){return e}},T=Array.isArray,In=Array.prototype.push,Qr=function(r,e){In.apply(r,T(e)?e:[e])},Fn=Date.prototype.toISOString,Gr=se.default,A={addQueryPrefix:!1,allowDots:!1,charset:"utf-8",charsetSentinel:!1,delimiter:"&",encode:!0,encoder:Oe.encode,encodeValuesOnly:!1,format:Gr,formatter:se.formatters[Gr],indices:!1,serializeDate:function(e){return Fn.call(e)},skipNulls:!1,strictNullHandling:!1},Cn=function(e){return typeof e=="string"||typeof e=="number"||typeof e=="boolean"||typeof e=="symbol"||typeof e=="bigint"},ze={},Dn=function r(e,t,n,a,o,f,i,l,s,u,p,c,y,d,h,E){for(var m=e,R=E,I=0,_=!1;(R=R.get(ze))!==void 0&&!_;){var ne=R.get(e);if(I+=1,typeof ne<"u"){if(ne===I)throw new RangeError("Cyclic object value");_=!0}typeof R.get(ze)>"u"&&(I=0)}if(typeof l=="function"?m=l(t,m):m instanceof Date?m=p(m):n==="comma"&&T(m)&&(m=Oe.maybeMap(m,function(G){return G instanceof Date?p(G):G})),m===null){if(o)return i&&!d?i(t,A.encoder,h,"key",c):t;m=""}if(Cn(m)||Oe.isBuffer(m)){if(i){var ce=d?t:i(t,A.encoder,h,"key",c);return[y(ce)+"="+y(i(m,A.encoder,h,"value",c))]}return[y(t)+"="+y(String(m))]}var q=[];if(typeof m>"u")return q;var F;if(n==="comma"&&T(m))d&&i&&(m=Oe.maybeMap(m,i)),F=[{value:m.length>0?m.join(",")||null:void 0}];else if(T(l))F=l;else{var W=Object.keys(m);F=s?W.sort(s):W}for(var L=a&&T(m)&&m.length===1?t+"[]":t,oe=0;oe<F.length;++oe){var P=F[oe],x=typeof P=="object"&&typeof P.value<"u"?P.value:m[P];if(!(f&&x===null)){var k=T(m)?typeof n=="function"?n(L,P):L:L+(u?"."+P:"["+P+"]");E.set(e,I);var ue=zr();ue.set(ze,E),Qr(q,r(x,k,n,a,o,f,n==="comma"&&d&&T(m)?null:i,l,s,u,p,c,y,d,h,ue))}}return q},Nn=function(e){if(!e)return A;if(e.encoder!==null&&typeof e.encoder<"u"&&typeof e.encoder!="function")throw new TypeError("Encoder has to be a function.");var t=e.charset||A.charset;if(typeof e.charset<"u"&&e.charset!=="utf-8"&&e.charset!=="iso-8859-1")throw new TypeError("The charset option must be either utf-8, iso-8859-1, or undefined");var n=se.default;if(typeof e.format<"u"){if(!Tn.call(se.formatters,e.format))throw new TypeError("Unknown format option provided.");n=e.format}var a=se.formatters[n],o=A.filter;return(typeof e.filter=="function"||T(e.filter))&&(o=e.filter),{addQueryPrefix:typeof e.addQueryPrefix=="boolean"?e.addQueryPrefix:A.addQueryPrefix,allowDots:typeof e.allowDots>"u"?A.allowDots:!!e.allowDots,charset:t,charsetSentinel:typeof e.charsetSentinel=="boolean"?e.charsetSentinel:A.charsetSentinel,delimiter:typeof e.delimiter>"u"?A.delimiter:e.delimiter,encode:typeof e.encode=="boolean"?e.encode:A.encode,encoder:typeof e.encoder=="function"?e.encoder:A.encoder,encodeValuesOnly:typeof e.encodeValuesOnly=="boolean"?e.encodeValuesOnly:A.encodeValuesOnly,filter:o,format:n,formatter:a,serializeDate:typeof e.serializeDate=="function"?e.serializeDate:A.serializeDate,skipNulls:typeof e.skipNulls=="boolean"?e.skipNulls:A.skipNulls,sort:typeof e.sort=="function"?e.sort:null,strictNullHandling:typeof e.strictNullHandling=="boolean"?e.strictNullHandling:A.strictNullHandling}};Vr.exports=function(r,e){var t=r,n=Nn(e),a,o;typeof n.filter=="function"?(o=n.filter,t=o("",t)):T(n.filter)&&(o=n.filter,a=o);var f=[];if(typeof t!="object"||t===null)return"";var i;e&&e.arrayFormat in kr?i=e.arrayFormat:e&&"indices"in e?i=e.indices?"indices":"repeat":i="indices";var l=kr[i];if(e&&"commaRoundTrip"in e&&typeof e.commaRoundTrip!="boolean")throw new TypeError("`commaRoundTrip` must be a boolean, or absent");var s=l==="comma"&&e&&e.commaRoundTrip;a||(a=Object.keys(t)),n.sort&&a.sort(n.sort);for(var u=zr(),p=0;p<a.length;++p){var c=a[p];n.skipNulls&&t[c]===null||Qr(f,Dn(t[c],c,l,s,n.strictNullHandling,n.skipNulls,n.encode?n.encoder:null,n.filter,n.sort,n.allowDots,n.serializeDate,n.format,n.formatter,n.encodeValuesOnly,n.charset,u))}var y=f.join(n.delimiter),d=n.addQueryPrefix===!0?"?":"";return n.charsetSentinel&&(n.charset==="iso-8859-1"?d+="utf8=%26%2310003%3B&":d+="utf8=%E2%9C%93&"),y.length>0?d+y:""}});var Yr=S((wo,Kr)=>{"use strict";var Z=Ge(),Qe=Object.prototype.hasOwnProperty,$n=Array.isArray,v={allowDots:!1,allowPrototypes:!1,allowSparse:!1,arrayLimit:20,charset:"utf-8",charsetSentinel:!1,comma:!1,decoder:Z.decode,delimiter:"&",depth:5,ignoreQueryPrefix:!1,interpretNumericEntities:!1,parameterLimit:1e3,parseArrays:!0,plainObjects:!1,strictNullHandling:!1},Mn=function(r){return r.replace(/&#(\d+);/g,function(e,t){return String.fromCharCode(parseInt(t,10))})},jr=function(r,e){return r&&typeof r=="string"&&e.comma&&r.indexOf(",")>-1?r.split(","):r},qn="utf8=%26%2310003%3B",Un="utf8=%E2%9C%93",Bn=function(e,t){var n={__proto__:null},a=t.ignoreQueryPrefix?e.replace(/^\?/,""):e,o=t.parameterLimit===1/0?void 0:t.parameterLimit,f=a.split(t.delimiter,o),i=-1,l,s=t.charset;if(t.charsetSentinel)for(l=0;l<f.length;++l)f[l].indexOf("utf8=")===0&&(f[l]===Un?s="utf-8":f[l]===qn&&(s="iso-8859-1"),i=l,l=f.length);for(l=0;l<f.length;++l)if(l!==i){var u=f[l],p=u.indexOf("]="),c=p===-1?u.indexOf("="):p+1,y,d;c===-1?(y=t.decoder(u,v.decoder,s,"key"),d=t.strictNullHandling?null:""):(y=t.decoder(u.slice(0,c),v.decoder,s,"key"),d=Z.maybeMap(jr(u.slice(c+1),t),function(h){return t.decoder(h,v.decoder,s,"value")})),d&&t.interpretNumericEntities&&s==="iso-8859-1"&&(d=Mn(d)),u.indexOf("[]=")>-1&&(d=$n(d)?[d]:d),Qe.call(n,y)?n[y]=Z.combine(n[y],d):n[y]=d}return n},Hn=function(r,e,t,n){for(var a=n?e:jr(e,t),o=r.length-1;o>=0;--o){var f,i=r[o];if(i==="[]"&&t.parseArrays)f=[].concat(a);else{f=t.plainObjects?Object.create(null):{};var l=i.charAt(0)==="["&&i.charAt(i.length-1)==="]"?i.slice(1,-1):i,s=parseInt(l,10);!t.parseArrays&&l===""?f={0:a}:!isNaN(s)&&i!==l&&String(s)===l&&s>=0&&t.parseArrays&&s<=t.arrayLimit?(f=[],f[s]=a):l!=="__proto__"&&(f[l]=a)}a=f}return a},_n=function(e,t,n,a){if(!!e){var o=n.allowDots?e.replace(/\.([^.[]+)/g,"[$1]"):e,f=/(\[[^[\]]*])/,i=/(\[[^[\]]*])/g,l=n.depth>0&&f.exec(o),s=l?o.slice(0,l.index):o,u=[];if(s){if(!n.plainObjects&&Qe.call(Object.prototype,s)&&!n.allowPrototypes)return;u.push(s)}for(var p=0;n.depth>0&&(l=i.exec(o))!==null&&p<n.depth;){if(p+=1,!n.plainObjects&&Qe.call(Object.prototype,l[1].slice(1,-1))&&!n.allowPrototypes)return;u.push(l[1])}return l&&u.push("["+o.slice(l.index)+"]"),Hn(u,t,n,a)}},Wn=function(e){if(!e)return v;if(e.decoder!==null&&e.decoder!==void 0&&typeof e.decoder!="function")throw new TypeError("Decoder has to be a function.");if(typeof e.charset<"u"&&e.charset!=="utf-8"&&e.charset!=="iso-8859-1")throw new TypeError("The charset option must be either utf-8, iso-8859-1, or undefined");var t=typeof e.charset>"u"?v.charset:e.charset;return{allowDots:typeof e.allowDots>"u"?v.allowDots:!!e.allowDots,allowPrototypes:typeof e.allowPrototypes=="boolean"?e.allowPrototypes:v.allowPrototypes,allowSparse:typeof e.allowSparse=="boolean"?e.allowSparse:v.allowSparse,arrayLimit:typeof e.arrayLimit=="number"?e.arrayLimit:v.arrayLimit,charset:t,charsetSentinel:typeof e.charsetSentinel=="boolean"?e.charsetSentinel:v.charsetSentinel,comma:typeof e.comma=="boolean"?e.comma:v.comma,decoder:typeof e.decoder=="function"?e.decoder:v.decoder,delimiter:typeof e.delimiter=="string"||Z.isRegExp(e.delimiter)?e.delimiter:v.delimiter,depth:typeof e.depth=="number"||e.depth===!1?+e.depth:v.depth,ignoreQueryPrefix:e.ignoreQueryPrefix===!0,interpretNumericEntities:typeof e.interpretNumericEntities=="boolean"?e.interpretNumericEntities:v.interpretNumericEntities,parameterLimit:typeof e.parameterLimit=="number"?e.parameterLimit:v.parameterLimit,parseArrays:e.parseArrays!==!1,plainObjects:typeof e.plainObjects=="boolean"?e.plainObjects:v.plainObjects,strictNullHandling:typeof e.strictNullHandling=="boolean"?e.strictNullHandling:v.strictNullHandling}};Kr.exports=function(r,e){var t=Wn(e);if(r===""||r===null||typeof r>"u")return t.plainObjects?Object.create(null):{};for(var n=typeof r=="string"?Bn(r,t):r,a=t.plainObjects?Object.create(null):{},o=Object.keys(n),f=0;f<o.length;++f){var i=o[f],l=_n(i,n[i],t,typeof r=="string");a=Z.merge(a,l,t)}return t.allowSparse===!0?a:Z.compact(a)}});var Zr=S((Eo,Xr)=>{"use strict";var Ln=Jr(),kn=Yr(),Gn=Pe();Xr.exports={formats:Gn,parse:kn,stringify:Ln}});var Ve=st(Zr());var zn=()=>typeof window=="object",rt=r=>r&&typeof r=="object"&&!Array.isArray(Array),Qn=r=>{if(!rt(r))throw Error("type should be object!");return!Object.keys(r).length};function et(r){return r==null?!1:!!(typeof r=="string"||typeof r=="bigint"||typeof r=="number"||typeof r=="boolean"||Array.isArray(r)&&r.length)}function Vn(r){if(!rt(r)||Qn(r))return"";let e="?";return Object.keys(r).forEach((n,a)=>{if(!et(r[n]))return;a!==0&&(e+="&"),Array.isArray(r[n])?r[n].forEach((f,i)=>{et(f)&&(i!==0&&(e+="&"),e+=`${encodeURIComponent(n)}=${encodeURIComponent(f)}`)}):e+=`${encodeURIComponent(n)}=${encodeURIComponent(r[n])}`}),e}function tt(r){let e=[];return r.replace(/(\{+)([^}]+)(}+)/g,(t,n,a,o)=>(n.length===o.length&&e.push(a),a)),e}function Jn(r,e){let t=r;return tt(r).forEach(a=>{e[a]&&(t=t.replace(`{${a}}`,e[a]))}),t}function jn(){}var Kn=["json","text","blob","arrayBuffer","formData"],Yn=function(){let e={};return{set:function(i){e=i},getAll:function(){return e},update:function(i){e={...e,...i}},remove:function(i){typeof i=="string"&&delete e[i]}}}(),Xn=function(){let e={};return{set:function(i){e=i},getAll:function(){return e},update:function(i){e={...e,...i}},remove:function(i){typeof i=="string"&&delete e[i]}}}(),M={request:void 0,response:void 0};function xo({request:r,response:e}){r&&(M.request=r),e&&(M.response=e)}function Zn(r,e,t={}){return console.log(Ve.default),e.startsWith("http")?e:`${r}${e.startsWith("/")?"":"/"}${e}?${Ve.default.stringify(t,{skipNulls:!0})}`}async function ee(r,e,{params:t={},configs:n={},body:a,headers:o={},responseType:f="json",meta:i={}}){let l={},s,u,p,c={headers:{...Xn.getAll(),...o},configs:{...Yn.getAll(),...n},params:t,body:a,path:e,responseType:f,meta:i,type:r};M.request&&(c={...c,...M.request(c)}),l.method=c.type,c.body&&c.type&&c.type!=="GET"&&(c.body instanceof FormData||typeof c.body=="string"?l.body=c.body:l.body=c.body&&JSON.stringify(c.body)),Object.keys(c.headers).forEach(y=>{c.headers[y]===void 0&&typeof c.headers[y]>"u"&&delete c.headers[y]}),u=Zn(c.configs.baseURL,c.path,c.params),l={...l,...c.configs,headers:c.headers};try{p=await fetch(u,l);let y=c.type==="HEAD"||p.status===204,d={};if(y||(d=await p[Kn.includes(c.responseType)?c.responseType:"json"]()),!p.ok)throw s={meta:c.meta,response:p,error:{...d}},s;return s={data:d,response:p,meta:c.meta},M.response?M.response(s,l,c):s}catch(y){let h=y instanceof Error&&!("response"in y)?{error:{name:y.name,message:y.message},meta:c.meta}:y;return M.response?M.response(h,l,c):h}}function re(){return new AbortController}function te(r,e){return typeof r!="number"?void 0:setTimeout(()=>{e.abort()},r)}async function eo(r,{params:e,configs:t={},headers:n,responseType:a,meta:o={},timeout:f}={},i){let l=re();l instanceof AbortController&&(t.signal=l.signal),i&&i(l);let s=te(f,l),{data:u,response:p,error:c}=await ee("GET",r,{params:e,configs:t,headers:n,responseType:a,meta:o});return clearTimeout(s),{data:u,response:p,error:c,meta:o}}async function ro(r,{params:e,configs:t={},headers:n,meta:a={},timeout:o}={},f){let i=re();i instanceof AbortController&&(t.signal=i.signal),f&&f(i);let l=te(o,i),{data:s,response:u,error:p}=await ee("HEAD",r,{params:e,configs:t,headers:n,meta:a});return clearTimeout(l),{data:s,response:u,error:p,meta:a}}async function to(r,{body:e={},params:t,configs:n={},headers:a={},responseType:o,meta:f={},timeout:i}={},l){let s=re();s instanceof AbortController&&(n.signal=s.signal),l&&l(s);let u=te(i,s),{data:p,response:c,error:y}=await ee("POST",r,{params:t,configs:n,body:e,headers:a,responseType:o,meta:f});return clearTimeout(u),{data:p,response:c,error:y,meta:f}}async function no(r,{body:e={},params:t,configs:n={},headers:a={},responseType:o,meta:f={},timeout:i}={},l){let s=re();s instanceof AbortController&&(n.signal=s.signal),l&&l(s);let u=te(i,s),{data:p,response:c,error:y}=await ee("PUT",r,{params:t,configs:n,body:e,headers:a,responseType:o,meta:f});return clearTimeout(u),{data:p,response:c,error:y,meta:f}}async function oo(r,{body:e={},params:t,configs:n={},headers:a={},responseType:o,meta:f={},timeout:i}={},l){let s=re();s instanceof AbortController&&(n.signal=s.signal),l&&l(s);let u=te(i,s),{data:p,response:c,error:y}=await ee("DELETE",r,{params:t,configs:n,body:e,headers:a,responseType:o,meta:f});return clearTimeout(u),{data:p,response:c,error:y,meta:f}}async function ao(r,{body:e={},params:t,configs:n={},headers:a={},responseType:o,meta:f={},timeout:i}={},l){let s=re();s instanceof AbortController&&(n.signal=s.signal),l&&l(s);let u=te(i,s),{data:p,response:c,error:y}=await ee("PATCH",r,{params:t,configs:n,body:e,headers:a,responseType:o,meta:f});return clearTimeout(u),{data:p,response:c,error:y,meta:f}}var io={POST:to,GET:eo,DELETE:oo,PUT:no,PATCH:ao,HEAD:ro},To=io;export{oo as DELETE,eo as GET,ro as HEAD,ao as PATCH,to as POST,no as PUT,To as default,tt as getParamsFromString,Yn as globalConfigs,Xn as globalHeaders,zn as isBrowser,jn as nop,Jn as replaceParamsInString,Vn as serializeObject,xo as setInterceptors};
//# sourceMappingURL=data:application/json;base64,
