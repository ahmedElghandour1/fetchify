/** 
 * Fetchify v1.1.2-beta.4 (https://github.com/ahmedElghandour1/fetchify#readme)
 * Copyright 2021 - 2023 | Author: Ahmed Elghandour
 * Licensed under MIT (https://github.com/ahmedElghandour1/fetchify/blob/master/LICENSE)
 */

var C=()=>typeof window=="object",I=e=>e&&typeof e=="object"&&!Array.isArray(Array),H=e=>{if(!I(e))throw Error("type should be object!");return!Object.keys(e).length};function A(e){return e==null?!1:!!(typeof e=="string"||typeof e=="bigint"||typeof e=="number"||typeof e=="boolean"||Array.isArray(e)&&e.length)}function b(e){if(!I(e)||H(e))return"";let t="?";return Object.keys(e).forEach((o,l)=>{if(!A(e[o]))return;l!==0&&(t+="&"),Array.isArray(e[o])?e[o].forEach((s,n)=>{A(s)&&(n!==0&&(t+="&"),t+=`${encodeURIComponent(o)}=${encodeURIComponent(s)}`)}):t+=`${encodeURIComponent(o)}=${encodeURIComponent(e[o])}`}),t}function P(e){let t=[];return e.replace(/(\{+)([^}]+)(}+)/g,(c,o,l,p)=>(o.length===p.length&&t.push(l),l)),t}function E(e,t){let c=e;return P(e).forEach(l=>{t[l]&&(c=c.replace(`{${l}}`,t[l]))}),c}function w(){}var x=["json","text","blob","arrayBuffer","formData"],D=function(){let t={};return{set:function(n){t=n},getAll:function(){return t},update:function(n){t={...t,...n}},remove:function(n){typeof n=="string"&&delete t[n]}}}(),F=function(){let t={};return{set:function(n){t=n},getAll:function(){return t},update:function(n){t={...t,...n}},remove:function(n){typeof n=="string"&&delete t[n]}}}(),f={request:void 0,response:void 0};function G({request:e,response:t}){e&&(f.request=e),t&&(f.response=t)}function v(e,t,c={}){return t.startsWith("http")?t:`${e}${t.startsWith("/")?"":"/"}${t}${b(c)}`}async function g(e,t,{params:c={},configs:o={},body:l,headers:p={},responseType:s="json",meta:n={}}){let a={},i,u,d,r={headers:{...F.getAll(),...p},configs:{...D.getAll(),...o},params:c,body:l,path:t,responseType:s,meta:n,type:e};f.request&&(r=f.request(r)||r),a.method=r.type,r.body&&r.type&&r.type!=="GET"&&(r.body instanceof FormData||typeof r.body=="string"?a.body=r.body:a.body=r.body&&JSON.stringify(r.body)),Object.keys(r.headers).forEach(y=>{r.headers[y]===void 0&&typeof r.headers[y]>"u"&&delete r.headers[y]}),u=v(r.configs.baseURL,r.path,r.params),a={...a,...r.configs,headers:r.headers};try{d=await fetch(u,a);let y=r.type==="HEAD"||d.status===204,h={};if(y||(h=await d[x.includes(r.responseType)?r.responseType:"json"]()),!d.ok)throw i={meta:r.meta,response:d,error:{...h}},i;return i={data:h,response:d,meta:r.meta},f.response?f.response(i,a,r):i}catch(y){let R=y instanceof Error&&!("response"in y)?{error:{name:y.name,message:y.message},meta:r.meta}:y;return f.response?f.response(R,a,r):R}}function m(){return new AbortController}function T(e,t){return typeof e!="number"?void 0:setTimeout(()=>{t.abort()},e)}async function q(e,{params:t,configs:c={},headers:o,responseType:l,meta:p={},timeout:s}={},n){let a=m();a instanceof AbortController&&(c.signal=a.signal),n&&n(a);let i=T(s,a),{data:u,response:d,error:r}=await g("GET",e,{params:t,configs:c,headers:o,responseType:l,meta:p});return clearTimeout(i),{data:u,response:d,error:r,meta:p}}async function O(e,{params:t,configs:c={},headers:o,meta:l={},timeout:p}={},s){let n=m();n instanceof AbortController&&(c.signal=n.signal),s&&s(n);let a=T(p,n),{data:i,response:u,error:d}=await g("HEAD",e,{params:t,configs:c,headers:o,meta:l});return clearTimeout(a),{data:i,response:u,error:d,meta:l}}async function U(e,{body:t={},params:c,configs:o={},headers:l={},responseType:p,meta:s={},timeout:n}={},a){let i=m();i instanceof AbortController&&(o.signal=i.signal),a&&a(i);let u=T(n,i),{data:d,response:r,error:y}=await g("POST",e,{params:c,configs:o,body:t,headers:l,responseType:p,meta:s});return clearTimeout(u),{data:d,response:r,error:y,meta:s}}async function $(e,{body:t={},params:c,configs:o={},headers:l={},responseType:p,meta:s={},timeout:n}={},a){let i=m();i instanceof AbortController&&(o.signal=i.signal),a&&a(i);let u=T(n,i),{data:d,response:r,error:y}=await g("PUT",e,{params:c,configs:o,body:t,headers:l,responseType:p,meta:s});return clearTimeout(u),{data:d,response:r,error:y,meta:s}}async function j(e,{body:t={},params:c,configs:o={},headers:l={},responseType:p,meta:s={},timeout:n}={},a){let i=m();i instanceof AbortController&&(o.signal=i.signal),a&&a(i);let u=T(n,i),{data:d,response:r,error:y}=await g("DELETE",e,{params:c,configs:o,body:t,headers:l,responseType:p,meta:s});return clearTimeout(u),{data:d,response:r,error:y,meta:s}}async function S(e,{body:t={},params:c,configs:o={},headers:l={},responseType:p,meta:s={},timeout:n}={},a){let i=m();i instanceof AbortController&&(o.signal=i.signal),a&&a(i);let u=T(n,i),{data:d,response:r,error:y}=await g("PATCH",e,{params:c,configs:o,body:t,headers:l,responseType:p,meta:s});return clearTimeout(u),{data:d,response:r,error:y,meta:s}}var k={POST:U,GET:q,DELETE:j,PUT:$,PATCH:S,HEAD:O},_=k;export{j as DELETE,q as GET,O as HEAD,S as PATCH,U as POST,$ as PUT,_ as default,P as getParamsFromString,D as globalConfigs,F as globalHeaders,C as isBrowser,w as nop,E as replaceParamsInString,b as serializeObject,G as setInterceptors};
//# sourceMappingURL=data:application/json;base64,
